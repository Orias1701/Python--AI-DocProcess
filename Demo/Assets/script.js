document.addEventListener("DOMContentLoaded", () => {
    const chatBody = document.getElementById("chatBody");
    const chatForm = document.getElementById("chatForm");
    const fileInput = document.getElementById("fileUpload");
    const fileCard = document.getElementById("fileCard");
    const fileNameSpan = document.getElementById("fileName");
    const removeFileBtn = document.getElementById("removeFile");

    /**
     * G√µ t·ª´ng k√Ω t·ª± c·ªßa m·ªôt chu·ªói vƒÉn b·∫£n v√†o m·ªôt ph·∫ßn t·ª≠.
     * @param {HTMLElement} element - Ph·∫ßn t·ª≠ ƒë·ªÉ g√µ ch·ªØ v√†o.
     * @param {string} text - N·ªôi dung vƒÉn b·∫£n.
     * @param {number} delay - Th·ªùi gian tr·ªÖ gi·ªØa c√°c k√Ω t·ª± (ms).
     */
    function typeWriter(element, text, delay = 10) {
        let i = 0;
        element.innerHTML = ""; // X√≥a n·ªôi dung c≈©
        
        function typing() {
            if (i < text.length) {
                // Gi·ªØ l·∫°i c√°c th·∫ª HTML nh∆∞ **, \n
                if (text.substring(i, i + 2) === "**") {
                    let boldEnd = text.indexOf("**", i + 2);
                    if (boldEnd !== -1) {
                        element.innerHTML += `<strong>${text.substring(i + 2, boldEnd)}</strong>`;
                        i = boldEnd + 2;
                    }
                } else if (text.substring(i, i + 1) === "\n") {
                     element.innerHTML += "<br>";
                     i++;
                }
                else {
                    element.innerHTML += text.charAt(i);
                    i++;
                }
                chatBody.scrollTop = chatBody.scrollHeight; // Cu·ªôn xu·ªëng khi g√µ
                setTimeout(typing, delay);
            }
        }
        typing();
    }


    /**
     * T·∫°o v√† n·ªëi m·ªôt h√†ng tin nh·∫Øn m·ªõi v√†o th√¢n chat.
     * @param {string} sender - "user" ho·∫∑c "bot".
     * @param {string} text - N·ªôi dung vƒÉn b·∫£n c·ªßa tin nh·∫Øn.
     * @param {boolean} useTypewriter - K√≠ch ho·∫°t hi·ªáu ·ª©ng g√µ ch·ªØ cho bot.
     */
    function appendMessage(sender, text, useTypewriter = false) {
        const messageRow = document.createElement("div");
        const avatar = document.createElement("div");
        const messageBubble = document.createElement("div")

        messageRow.classList.add("message-row", `${sender}-row`);
        avatar.classList.add("avatar");
        avatar.textContent = "";
        if (sender === 'bot'){
            messageBubble.classList.add("bot-msg");
        } else {
            messageBubble.classList.add("user-msg");
        }

        if (sender === 'bot' && useTypewriter) {
            typeWriter(messageBubble, text, 5);
        } else {
            // Thay th·∫ø markdown ƒë∆°n gi·∫£n cho hi·ªÉn th·ªã
            const formattedText = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/\n/g, '<br>');
            messageBubble.innerHTML = formattedText;
        }

        messageRow.appendChild(avatar);
        messageRow.appendChild(messageBubble);
        chatBody.appendChild(messageRow);
        chatBody.scrollTop = chatBody.scrollHeight;
    }


    /**
     * Hi·ªÉn th·ªã ch·ªâ b√°o ƒëang g√µ c·ªßa bot.
     */
    function appendTyping() {
        const typing = document.createElement("div");
        typing.classList.add("typing");
        typing.textContent = "AI ƒëang x·ª≠ l√Ω...";
        chatBody.appendChild(typing);
        chatBody.scrollTop = chatBody.scrollHeight;
        return typing;
    }

    // Ch√†o m·ª´ng ban ƒë·∫ßu
    setTimeout(() => {
        appendMessage("bot", "Xin ch√†o! H√£y t·∫£i l√™n file PDF ƒë·ªÉ t√¥i t√≥m t·∫Øt v√† ph√¢n lo·∫°i cho b·∫°n.", true);
    }, 500);


    // Khi ch·ªçn file, hi·ªÉn th·ªã card t√™n
    fileInput.addEventListener("change", () => {
        const file = fileInput.files[0];
        if (file) {
            fileCard.style.display = "flex";
            fileNameSpan.textContent = file.name;
        } else {
            fileCard.style.display = "none";
        }
    });

    // N√∫t x√≥a file
    removeFileBtn.addEventListener("click", () => {
        fileInput.value = "";
        fileCard.style.display = "none";
    });

    /**
     * G·ª≠i file ƒë·∫øn backend API ƒë·ªÉ x·ª≠ l√Ω.
     * @param {File} file - File PDF c·∫ßn g·ª≠i.
     */
    async function sendFile(file) {
        appendMessage("user", `Attached: ${file.name}`);

        const typing = appendTyping();
        const formData = new FormData();
        formData.append("file", file);

        try {
            const response = await fetch("http://127.0.0.1:8000/process_pdf", {
                method: "POST",
                body: formData
            });
            const data = await response.json();
            typing.remove();

            if (response.ok && data.status === "success") {
                // Hi·ªÉn th·ªã t√≥m t·∫Øt v·ªõi hi·ªáu ·ª©ng g√µ ch·ªØ
                appendMessage("bot", `‚ú®**Chatbot**\n ƒê√¢y l√† m·ªôt vƒÉn b·∫£n v·ªÅ ch·ªß ƒë·ªÅ **${data.category}** v·ªõi n·ªôi dung ƒë∆∞·ª£c t√≥m t·∫Øt nh∆∞ sau: \n${data.summary}`, true);
            } else {
                appendMessage("bot", `‚ùå **L·ªói:** ${data.message || "Kh√¥ng r√µ"}`, true);
            }
        } catch (err) {
            typing.remove();
            appendMessage("bot", "‚ö†Ô∏è **L·ªói k·∫øt n·ªëi:** Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi API!", true);
        }
    }

    // X·ª≠ l√Ω vi·ªác g·ª≠i form
    chatForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const file = fileInput.files[0];
        if (!file) {
            appendMessage("bot", "üìÑ Vui l√≤ng ch·ªçn m·ªôt file PDF ƒë·ªÉ x·ª≠ l√Ω.", true);
            return;
        }
        await sendFile(file);
        fileInput.value = "";
        fileCard.style.display = "none";
    });
});